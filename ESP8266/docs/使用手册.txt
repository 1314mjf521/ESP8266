# ESP8266 步进电机远程控制系统 使用手册

## 1. 功能概述
本系统基于 ESP8266 开发，支持以下功能：
1. 通过物理按钮控制步进电机的开关和方向。
2. 通过网页接口控制电机的开关、方向、速度和运行时长。
3. 通过 MQTT 协议实现远程控制和状态上报。
4. 支持智能配网功能，无需硬编码 WiFi 信息。
5. 支持 OTA (Over-The-Air) 升级功能，方便远程更新固件。
6. 限位保护功能：当限位按钮触发时，电机自动反转方向，避免继续运行造成损坏。

---

## 2. 配网指南
### 2.1 智能配网模式
1. 上电后，设备会自动进入智能配网模式，创建名为 `ESP8266_SmartConfig` 的 WiFi 热点。
2. 使用手机或电脑连接该热点，打开浏览器访问 `192.168.4.1`。
3. 在页面中输入目标 WiFi 的 SSID 和密码，点击“保存”。
4. 设备会尝试连接目标 WiFi，成功后会显示设备的 IP 地址。

### 2.2 手动重新进入配网模式
1. 通过网页访问 `/api/reset_wifi` 接口。
2. 设备会断开当前 WiFi 并重新进入智能配网模式。

---

## 3. 修改电机和按钮引脚
### 3.1 默认引脚定义
- **方向控制引脚 (DIR_PIN)**: D1 (GPIO 4)
- **步进控制引脚 (STEP_PIN)**: D2 (GPIO 5)
- **使能引脚 (ENABLE_PIN)**: D3 (GPIO 16)
- **电机开关按钮引脚 (MOTOR_BUTTON_PIN)**: D4 (GPIO 14)
- **电机方向按钮引脚 (BUTTON_DIRECTION_PIN)**: D5 (GPIO 12)

### 3.2 修改引脚
1. 打开 `src/main.cpp` 文件。
2. 找到以下代码段：
   ```cpp
   #define DIR_PIN D1
   #define STEP_PIN D2
   #define ENABLE_PIN D3
   #define MOTOR_BUTTON_PIN D4
   #define BUTTON_DIRECTION_PIN D5
   ```
3. 修改对应的引脚定义为所需的 GPIO 编号。
4. 保存文件并重新编译上传。

---

## 4. 网页控制指南
### 4.1 访问主页面
1. 在浏览器中输入设备的 IP 地址（如 `http://192.168.1.100`）。
2. 主页面功能：
   - 查看设备信息（IP 地址、MAC 地址、固件版本、在线控制端数量）。
   - 控制电机开关、方向、加速、减速。
   - 设置电机运行时长。
   - 设置 MQTT 服务器地址。
   - 启用或禁用 MQTT 控制。
   - 进入 OTA 升级页面。
   - 重新进入配网模式。

### 4.2 OTA 升级
1. 点击“OTA 升级”按钮进入升级页面。
2. 选择本地固件文件或输入远程固件地址，点击“上传并升级”或“开始远程升级”。
3. 升级完成后，设备会显示成功信息并在 5 秒后自动重启。

---

## 5. API 接口调用指南
### 5.1 电机控制接口
- **开启电机**: `GET /motor/on`
- **关闭电机**: `GET /motor/off`
- **切换电机方向**: `GET /motor/direction`
- **加速**: `GET /motor/speed_up`
- **减速**: `GET /motor/slow_down`

### 5.2 设置电机运行时长
- **接口**: `GET /api/set_motor_duration?duration=<秒数>`
- **参数**: `duration` 为电机运行时长，单位为秒，范围为 1 到 1800。

### 5.3 设置 MQTT 地址
- **接口**: `GET /api/set_mqtt?address=<MQTT服务器地址>`
- **参数**: `address` 为 MQTT 服务器地址。

### 5.4 启用或禁用 MQTT 控制
- **接口**: `GET /api/mqtt_control?enable=<true|false>`
- **参数**: `enable` 为布尔值，`true` 表示启用，`false` 表示禁用。

### 5.5 获取设备信息
- **接口**: `GET /api/device_info`
- **返回值**: JSON 格式的设备信息，包括 IP 地址、MAC 地址、固件版本、在线控制端数量。

### 5.6 重新进入配网模式
- **接口**: `GET /api/reset_wifi`

---

## 6. MQTT 控制指南
### 6.1 MQTT 主题
- **电机控制主题**: `motor/control`
- **状态上报主题**: `motor/status`

### 6.2 发布控制命令
- **开启电机**: 发布消息 `on` 到主题 `motor/control`。
- **关闭电机**: 发布消息 `off` 到主题 `motor/control`。
- **正转**: 发布消息 `forward` 到主题 `motor/control`。
- **反转**: 发布消息 `reverse` 到主题 `motor/control`。

### 6.3 订阅状态上报
- 订阅主题 `motor/status`，接收电机状态的实时更新。

---

## 7. 限位保护功能
1. 当限位按钮（`MOTOR_BUTTON_PIN`）触发时，电机会自动停止运行。
2. 如果方向按钮（`BUTTON_DIRECTION_PIN`）同时触发，电机方向会自动反转。
3. 下次启动电机时，方向已切换，避免继续朝同一方向运行。

---

## 8. LED 状态指示
设备通过板载 LED 指示当前的 WiFi 状态：
- **WiFi 未连接**: LED 频闪（500 毫秒间隔）。
- **WiFi 已连接**: LED 常亮。

---

## 9. 注意事项
1. 修改引脚定义后，请确保硬件连接正确。
2. OTA 升级时，请确保设备电源稳定，避免中途断电。
3. MQTT 控制需要确保设备和 MQTT 服务器在同一网络中。
4. 如果设备无法正常工作，可通过重新进入配网模式恢复网络连接。

---

## 10. 技术支持
如需技术支持，请联系开发者或参考项目文档。

---

## 11. 编译警告修复指南
在使用 `PubSubClient` 库时，可能会遇到编译警告，提示类型不匹配问题。为避免此问题，请按照以下步骤修改库文件：

### 11.1 修改 `PubSubClient.cpp`
1. 打开文件路径：  
   `e:\ESP-8266-S3\ESP8266\.pio\libdeps\nodemcuv2\PubSubClient\src\PubSubClient.cpp`
2. 找到以下代码段：
   ```cpp
   return (rc == expectedLength);
   ```
3. 修改为：
   ```cpp
   return (static_cast<unsigned int>(rc) == static_cast<unsigned int>(expectedLength));
   ```
4. 保存文件。

### 11.2 修改原因
此修改用于修复类型不匹配的警告，确保 `rc` 和 `expectedLength` 的比较不会因类型差异导致潜在问题。

---

## 12. 注意事项
1. 修改库文件后，请确保保存并重新编译项目。
2. 如果更新了 `PubSubClient` 库版本，可能需要重新应用上述修改。
